FROM golang:1.24-bullseye AS builder

ARG KERNEL_VERSION
RUN if [ -z "$KERNEL_VERSION" ]; then \
      echo >&2 "ERROR: KERNEL_VERSION is empty.  \
      Please pass --build-arg KERNEL_VERSION=<your-kernel-version>"; \
      exit 1; \
    fi

# Install common development dependencies
RUN apt-get update && apt-get install -y \
    clang \
    llvm \
    libbpf-dev \
    libelf-dev \
    bpftool \
    pkg-config \
    libibverbs-dev \
    librdmacm-dev \
    dpkg-dev \
    linux-libc-dev \
    && rm -rf /var/lib/apt/lists/*

# Try to install kernel headers, but continue if it fails
RUN apt-get update && \
    apt-get install -y linux-headers-${KERNEL_VERSION} || \
    echo "Warning: Failed to install linux-headers-${KERNEL_VERSION}. eBPF features may not work correctly."

WORKDIR /app

# Copy go.mod and go.sum first to leverage Docker cache
COPY go.mod go.sum ./
RUN go mod download

# Copy the source code
COPY . .

# Install bpf2go and run go generate to create eBPF bindings
RUN cd internal/ebpf && KERNEL_VERSION=${KERNEL_VERSION} go generate ./... || echo "Warning: Failed to generate eBPF bindings"

# Build the Go application
RUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o /app/bin/agent cmd/agent/main.go

# Create default configuration
RUN mkdir -p /app && \
    /app/bin/agent --create-config --config-output /app/agent.yaml || true

# Runtime image
FROM debian:bullseye-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libibverbs1 \
    librdmacm1 \
    iproute2 \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy binary and config
COPY --from=builder /app/bin/agent ./agent
COPY --from=builder /app/agent.yaml ./agent.yaml

ENTRYPOINT ["./agent"]
